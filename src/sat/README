1. What can a SAT solver do?

      Given a circuit and a satisfiability target (e.g. a PO assignment),
   SAT solver can find a PI assignemt to satisfy the target. If for all
   input combinations such PI assignment does not exist, it will report
   "unsatisfiable".


2. Why should we use SAT solver in this project?

      The FEC pairs identified by simulations are just "potential" 
   equivalent pairs of signals. We will use SAT solver to formally check
   if they are indeed equivalent.


3. How to prove the equivalence of a FEC pair?

      We prove it by contraposition. That is, given a FEC pair (a, b), 
   we will create a new signal "f = a xor b" and use SAT solver to solve
   "f = 1". If "f = 1" is satisfiable (i.e. an input assignment is found),
   we will know that a and b are not equivalent and this assignment
   is a counter-example. Otherwise (the proof returns "unsatisfiable"), we
   can conclude that a and b must be equivalent. 


4. What does a SAT solver look like?

      We will use the miniSat SAT solver (http://minisat.se/). The SAT
   solver is defined as a C++ class and you don't really need to look into
   it. When you want to use it, you need to first create a SAT solver
   object, add clauses to the solver for the circuit under proof, specify
   the target signal/value to prove, and call the solver to prove it.


5. What do we provide in the reference code?

      The miniSat SAT solver has been simplified and included in the "sat"
   package. However, you don't need to study the code. All you need to 
   know and use is the interface functions defined in "sat.h". Just include
   "sat.h" in the file you want to evoke SAT solver.


6. How to use the miniSat SAT solver?

(1) Create a SAT solver object (e.g. SatSolver s;)
(2) Initialize it (by SatSolver::initialize())
(3) Generate the proof model from the circuit.
    - For each PI and AIG gate, assign a distinct "variable ID".
      The var IDs for the POs should be the same as its single fanin.
    - You should have a mechanism to record the mapping from your gates
      to the variable IDs in the solver. The mapping can be stored as a
      STL map (e.g. map<CirAigGate *, Var>), or recorded in a data member
      in the class CirAigGate.
    - For each AIG gate, construct the CNF formula for it and add to the
      solver. You can use "SatSolver::addAndCNF(vf, va, fa, vb, fb)",
      where vf, va and vb are the variable IDs for this gate and its two
      fanins (f = a & b), and fa, fb are bool variables to indicate where
      the inputs are inverted.
    - Add the proof logic if necessary. For example, to prove "a == b",
      you should add the clauses of "f = a xor b" to the solver, where
      "f" is a new varaible and you can add the clauses by the function
      "SatSolver::addXorCNF()".
(4) Add the SAT target as "assumption" to the solver instance.
    - Call "SatSolver::assumeRelease()" to reset the assumptions.
    - Add the SAT target(s) by "SatSolver::assumeProperty(varID, value)".
      For example, "solver->assumeProperty(38, true)".
    - Call "SatSolver::assumpSolve()" to solve. If it returns true, the
      SAT target is satisfiable. You can get the input assignment by the
      function "int SatSolver::getValue(Var)".
    - If the above step returns unsatisfiable, we can conclude the FEC pair
      must be equivalent and we can then merge them.
(5) Repeat (4) if you need to prove more SAT instances.
 

7. Please see "sat/test/satTest.cpp" for an example of using SAT.

