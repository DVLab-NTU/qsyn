qsyn> logger debug
[info]     Setting logger level to "debug"

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): h  q[0]
1 (t=2): h  q[0]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (h)
[debug]    Gate 1 (h)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 3)         #Neighbors:   1    (3, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, -)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (1, -) (2, -)
Total #Vertices: 4


qsyn> zx rule --hadamard-rule
[info]     Hadamard Rule                 2 iterations, total    2 matches
[debug]       1) 1 matches
[debug]       2) 1 matches

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (1, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 3)         #Neighbors:   1    (0, -)
Total #Vertices: 2


qsyn> zx vertex add hbox 0
[info]     Adding vertex 4...

qsyn> zx edge add 0 4 HADAMARD
[info]     Adding edge (0, 4), edge type: H...

qsyn> zx edge add 1 4 SIMPLE
[info]     Adding edge (1, 4), edge type: -...

qsyn> zx edge remove 0 1
[info]     Removing all edges between (0, 1)...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (4, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 3)         #Neighbors:   1    (4, -)
ID:    4 (H, 0)       (Qubit, Col): (0, 0)         #Neighbors:   2    (0, H) (1, -)
Total #Vertices: 3


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 1 iterations, total    1 matches
[debug]       1) 1 matches

qsyn> zx delete --all

qsyn> qcir delete --all

qsyn> logger debug
[info]     Setting logger level to "debug"

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): h  q[0]
1 (t=2): h  q[0]
2 (t=3): h  q[0]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (h)
[debug]    Gate 1 (h)
[debug]    Gate 2 (h)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (4, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, -)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, -) (4, -)
ID:    4 (H, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (1, -) (3, -)
Total #Vertices: 5


qsyn> zx edge remove 2 3 any
[info]     Removing all edges between (2, 3)...

qsyn> zx edge remove 3 4 any
[info]     Removing all edges between (3, 4)...

qsyn> zx edge add 2 3 HADAMARD
[info]     Adding edge (2, 3), edge type: H...

qsyn> zx edge add 3 4 HADAMARD
[info]     Adding edge (3, 4), edge type: H...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (4, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, H)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, H) (4, H)
ID:    4 (H, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (1, -) (3, H)
Total #Vertices: 5


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 3 iterations, total    3 matches
[debug]       1) 1 matches
[debug]       2) 1 matches
[debug]       3) 1 matches

qsyn> zx delete --all

qsyn> qcir delete --all

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): h  q[0]
1 (t=2): h  q[0]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (h)
[debug]    Gate 1 (h)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 3)         #Neighbors:   1    (3, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, -)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (1, -) (2, -)
Total #Vertices: 4


qsyn> zx edge remove 0 2
[info]     Removing all edges between (0, 2)...

qsyn> zx edge remove 2 3
[info]     Removing all edges between (2, 3)...

qsyn> zx edge remove 3 1
[info]     Removing all edges between (3, 1)...

qsyn> zx edge add 0 2 HADAMARD
[info]     Adding edge (0, 2), edge type: H...

qsyn> zx edge add 2 3 HADAMARD
[info]     Adding edge (2, 3), edge type: H...

qsyn> zx edge add 3 1 HADAMARD
[info]     Adding edge (3, 1), edge type: H...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 3)         #Neighbors:   1    (3, H)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, H) (3, H)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (1, H) (2, H)
Total #Vertices: 4


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 2 iterations, total    2 matches
[debug]       1) 1 matches
[debug]       2) 1 matches

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (1, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 3)         #Neighbors:   1    (0, H)
Total #Vertices: 2


qsyn> zx delete --all

qsyn> qcir delete --all

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): h  q[0]
1 (t=2): h  q[0]
2 (t=3): h  q[0]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (h)
[debug]    Gate 1 (h)
[debug]    Gate 2 (h)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (4, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, -)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, -) (4, -)
ID:    4 (H, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (1, -) (3, -)
Total #Vertices: 5


qsyn> zx edge remove 0 2 SIMPLE
[info]     Removing edge (0, 2), edge type: -...

qsyn> zx edge remove 2 3 SIMPLE
[info]     Removing edge (2, 3), edge type: -...

qsyn> zx edge remove 3 4 SIMPLE
[info]     Removing edge (3, 4), edge type: -...

qsyn> zx edge remove 4 1 SIMPLE
[info]     Removing edge (4, 1), edge type: -...

qsyn> zx edge add 0 2 HADAMARD
[info]     Adding edge (0, 2), edge type: H...

qsyn> zx edge add 2 3 HADAMARD
[info]     Adding edge (2, 3), edge type: H...

qsyn> zx edge add 3 4 HADAMARD
[info]     Adding edge (3, 4), edge type: H...

qsyn> zx edge add 4 1 HADAMARD
[info]     Adding edge (4, 1), edge type: H...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (4, H)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, H) (3, H)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, H) (4, H)
ID:    4 (H, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (1, H) (3, H)
Total #Vertices: 5


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 3 iterations, total    3 matches
[debug]       1) 1 matches
[debug]       2) 1 matches
[debug]       3) 1 matches

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (1, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (0, H)
Total #Vertices: 2


qsyn> zx delete --all

qsyn> qcir delete --all

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir gate add h 0

qsyn> qcir gate add z 0

qsyn> qcir gate add h 0

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): h  q[0]
1 (t=2): z  q[0]
2 (t=3): h  q[0]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (h)
[debug]    Gate 1 (z)
[debug]    Gate 2 (h)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (4, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, -)
ID:    3 (Z, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, -) (4, -)
ID:    4 (H, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (1, -) (3, -)
Total #Vertices: 5


qsyn> zx edge remove 0 2 SIMPLE
[info]     Removing edge (0, 2), edge type: -...

qsyn> zx edge remove 3 4 SIMPLE
[info]     Removing edge (3, 4), edge type: -...

qsyn> zx edge add 0 2 HADAMARD
[info]     Adding edge (0, 2), edge type: H...

qsyn> zx edge add 3 4 HADAMARD
[info]     Adding edge (3, 4), edge type: H...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (4, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, H) (3, -)
ID:    3 (Z, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, -) (4, H)
ID:    4 (H, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (1, -) (3, H)
Total #Vertices: 5


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 2 iterations, total    2 matches
[debug]       1) 1 matches
[debug]       2) 1 matches

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (3, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 4)         #Neighbors:   1    (3, -)
ID:    3 (Z, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (0, -) (1, -)
Total #Vertices: 3


qsyn> zx delete --all

qsyn> qcir delete --all

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir qubit add 

qsyn> qcir gate add z 0

qsyn> qcir gate add z 1

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): z  q[0]
1 (t=1): z  q[1]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (z)
[debug]    Gate 1 (z)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (4, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 2)         #Neighbors:   1    (4, -)
ID:    2 (●, 0)       (Qubit, Col): (1, 0)         #Neighbors:   1    (5, -)
ID:    3 (●, 0)       (Qubit, Col): (1, 2)         #Neighbors:   1    (5, -)
ID:    4 (Z, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (1, -)
ID:    5 (Z, π)       (Qubit, Col): (1, 1)         #Neighbors:   2    (2, -) (3, -)
Total #Vertices: 6


qsyn> zx vertex add hbox 0
[info]     Adding vertex 6...

qsyn> zx vertex add hbox 0
[info]     Adding vertex 7...

qsyn> zx edge add 4 6 HADAMARD
[info]     Adding edge (4, 6), edge type: H...

qsyn> zx edge add 6 7 SIMPLE
[info]     Adding edge (6, 7), edge type: -...

qsyn> zx edge add 7 5 HADAMARD
[info]     Adding edge (7, 5), edge type: H...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (4, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 2)         #Neighbors:   1    (4, -)
ID:    2 (●, 0)       (Qubit, Col): (1, 0)         #Neighbors:   1    (5, -)
ID:    3 (●, 0)       (Qubit, Col): (1, 2)         #Neighbors:   1    (5, -)
ID:    4 (Z, π)       (Qubit, Col): (0, 1)         #Neighbors:   3    (0, -) (1, -) (6, H)
ID:    5 (Z, π)       (Qubit, Col): (1, 1)         #Neighbors:   3    (2, -) (3, -) (7, H)
ID:    6 (H, 0)       (Qubit, Col): (0, 0)         #Neighbors:   2    (4, H) (7, -)
ID:    7 (H, 0)       (Qubit, Col): (0, 0)         #Neighbors:   2    (5, H) (6, -)
Total #Vertices: 8


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 2 iterations, total    2 matches
[debug]       1) 1 matches
[debug]       2) 1 matches

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (4, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 2)         #Neighbors:   1    (4, -)
ID:    2 (●, 0)       (Qubit, Col): (1, 0)         #Neighbors:   1    (5, -)
ID:    3 (●, 0)       (Qubit, Col): (1, 2)         #Neighbors:   1    (5, -)
ID:    4 (Z, π)       (Qubit, Col): (0, 1)         #Neighbors:   3    (0, -) (1, -) (5, -)
ID:    5 (Z, π)       (Qubit, Col): (1, 1)         #Neighbors:   3    (2, -) (3, -) (4, -)
Total #Vertices: 6


qsyn> zx delete --all

qsyn> qcir delete --all

qsyn> qcir qubit add
[info]     QCir list is empty now. Create a new one.
[info]     Successfully created and checked out to QCir 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir gate add z 0

qsyn> qcir gate add h 0

qsyn> qcir gate add h 0

qsyn> qcir gate add z 0

qsyn> qcir print --gate
Listed by gate ID
0 (t=1): h  q[0]
1 (t=2): h  q[0]
2 (t=3): z  q[0]
3 (t=4): h  q[0]
4 (t=5): h  q[0]
5 (t=6): z  q[0]

qsyn> qc2zx
[info]     Converting to QCir 0 to ZXGraph 0...
[debug]    Add boundaries
[debug]    Gate 0 (h)
[debug]    Gate 1 (h)
[debug]    Gate 2 (z)
[debug]    Gate 3 (h)
[debug]    Gate 4 (h)
[debug]    Gate 5 (z)
[info]     Successfully created and checked out to ZXGraph 0

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 7)         #Neighbors:   1    (7, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, -)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, -) (4, -)
ID:    4 (Z, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (3, -) (5, -)
ID:    5 (H, π)       (Qubit, Col): (0, 4)         #Neighbors:   2    (4, -) (6, -)
ID:    6 (H, π)       (Qubit, Col): (0, 5)         #Neighbors:   2    (5, -) (7, -)
ID:    7 (Z, π)       (Qubit, Col): (0, 6)         #Neighbors:   2    (1, -) (6, -)
Total #Vertices: 8


qsyn> zx edge remove 2 3 SIMPLE
[info]     Removing edge (2, 3), edge type: -...

qsyn> zx edge add 2 3 HADAMARD
[info]     Adding edge (2, 3), edge type: H...

qsyn> zx edge remove 4 5 SIMPLE
[info]     Removing edge (4, 5), edge type: -...

qsyn> zx edge add 4 5 HADAMARD
[info]     Adding edge (4, 5), edge type: H...

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (2, -)
ID:    1 (●, 0)       (Qubit, Col): (0, 7)         #Neighbors:   1    (7, -)
ID:    2 (H, π)       (Qubit, Col): (0, 1)         #Neighbors:   2    (0, -) (3, H)
ID:    3 (H, π)       (Qubit, Col): (0, 2)         #Neighbors:   2    (2, H) (4, -)
ID:    4 (Z, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (3, -) (5, H)
ID:    5 (H, π)       (Qubit, Col): (0, 4)         #Neighbors:   2    (4, H) (6, -)
ID:    6 (H, π)       (Qubit, Col): (0, 5)         #Neighbors:   2    (5, -) (7, -)
ID:    7 (Z, π)       (Qubit, Col): (0, 6)         #Neighbors:   2    (1, -) (6, -)
Total #Vertices: 8


qsyn> zx rule --hadamard-fusion
[info]     Hadamard Rule                 3 iterations, total    4 matches
[debug]       1) 2 matches
[debug]       2) 1 matches
[debug]       3) 1 matches

qsyn> zx print -v

ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (4, H)
ID:    1 (●, 0)       (Qubit, Col): (0, 7)         #Neighbors:   1    (7, -)
ID:    4 (Z, π)       (Qubit, Col): (0, 3)         #Neighbors:   2    (0, H) (7, H)
ID:    7 (Z, π)       (Qubit, Col): (0, 6)         #Neighbors:   2    (1, -) (4, H)
Total #Vertices: 4


qsyn> quit -f

