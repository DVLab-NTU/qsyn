qsyn> extract config --optimize-level 1

qsyn> zx read benchmark/zx/tof3.zx

qsyn> zx2ts

qsyn> zx optimize --full

qsyn> zx print -r

ID:   27 (Z, -π/4)    (Qubit, Col): (-2, 0)        #Neighbors:   1    (28, H)
ID:   29 (Z, -π/4)    (Qubit, Col): (-2, 0)        #Neighbors:   1    (30, H)
ID:   31 (Z, -π/4)    (Qubit, Col): (-2, 0)        #Neighbors:   1    (32, H)
ID:   33 (Z, π/4)     (Qubit, Col): (-2, 0)        #Neighbors:   1    (34, H)


ID:   28 (Z, 0)       (Qubit, Col): (-1, 0)        #Neighbors:   3    (7, H) (19, H) (27, H)
ID:   30 (Z, 0)       (Qubit, Col): (-1, 0)        #Neighbors:   3    (10, H) (19, H) (29, H)
ID:   32 (Z, 0)       (Qubit, Col): (-1, 0)        #Neighbors:   3    (7, H) (10, H) (31, H)
ID:   34 (Z, 0)       (Qubit, Col): (-1, 0)        #Neighbors:   4    (7, H) (10, H) (19, H) (33, H)


ID:    0 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (10, -)
ID:    3 (●, 0)       (Qubit, Col): (0, 11)        #Neighbors:   1    (10, -)
ID:   10 (Z, π/4)     (Qubit, Col): (0, 1)         #Neighbors:   5    (0, -) (3, -) (30, H) (32, H) (34, H)


ID:    1 (●, 0)       (Qubit, Col): (1, 0)         #Neighbors:   1    (7, -)
ID:    4 (●, 0)       (Qubit, Col): (1, 11)        #Neighbors:   1    (7, -)
ID:    7 (Z, π/4)     (Qubit, Col): (1, 1)         #Neighbors:   5    (1, -) (4, -) (28, H) (32, H) (34, H)


ID:    2 (●, 0)       (Qubit, Col): (2, 0)         #Neighbors:   1    (19, H)
ID:    5 (●, 0)       (Qubit, Col): (2, 11)        #Neighbors:   1    (19, H)
ID:   19 (Z, π/4)     (Qubit, Col): (2, 9)         #Neighbors:   5    (2, H) (5, H) (28, H) (30, H) (34, H)


qsyn> logger debug
[info]     Setting logger level to "debug"

qsyn> zx2qc
[debug]    Initializing extractor
[debug]    Cleaning frontier
[debug]    Extracting single qubit gates
[debug]    Extracting CZs
[debug]    Removing gadget(s)
[debug]    Gadget(s) are removed.
[debug]    Cleaning frontier
[debug]    Extracting single qubit gates
[debug]    Extracting CZs
[debug]    Removing gadget(s)
[debug]    Perform Gaussian elimination.
[debug]    Filter 0 CXs. Total: 0
[debug]    Filter 0 CXs. Total: 0
[debug]    Updating graph by matrix
[debug]    Extracting CXs
[debug]    Adding CX: 0 1
[debug]    Adding CX: 2 0
[debug]    Adding CX: 1 2
[debug]    Extracting Hadamards from matrix
[debug]    Cleaning frontier
[debug]    Extracting single qubit gates
[debug]    Extracting CZs
[debug]    Removing gadget(s)
[debug]    Gadget(s) are removed.
[debug]    Cleaning frontier
[debug]    Extracting single qubit gates
[debug]    Extracting CZs
[debug]    Removing gadget(s)
[debug]    Single neighbor found. Construct an easy matrix.
[debug]    Extracting Hadamards from matrix
[debug]    Cleaning frontier
[debug]    Extracting single qubit gates
[debug]    Extracting CZs
[debug]    Removing gadget(s)
[debug]    Perform Gaussian elimination.
[debug]    Filter 0 CXs. Total: 0
[debug]    Filter 0 CXs. Total: 0
[debug]    Updating graph by matrix
[debug]    Extracting CXs
[debug]    Adding CX: 2 1
[debug]    Adding CX: 0 2
[debug]    Adding CX: 1 0
[debug]    Extracting Hadamards from matrix
[debug]    Cleaning frontier
[debug]    Extracting single qubit gates
[debug]    Extracting CZs
[info]     Finished Extracting!
[debug]    Permuting qubits
[info]     Successfully created and checked out to QCir 0

qsyn> logger warn

qsyn> qc2zx 

qsyn> zx adjoint

qsyn> zx compose 0

qsyn> zx optimize --full  

qsyn> zx print -r

ID:    1 (●, 0)       (Qubit, Col): (0, 0)         #Neighbors:   1    (50, -)
ID:   50 (●, 0)       (Qubit, Col): (0, 29)        #Neighbors:   1    (1, -)


ID:    3 (●, 0)       (Qubit, Col): (1, 0)         #Neighbors:   1    (51, -)
ID:   51 (●, 0)       (Qubit, Col): (1, 29)        #Neighbors:   1    (3, -)


ID:    5 (●, 0)       (Qubit, Col): (2, 0)         #Neighbors:   1    (52, -)
ID:   52 (●, 0)       (Qubit, Col): (2, 29)        #Neighbors:   1    (5, -)


qsyn> qcir print
QCir (3 qubits, 31 gates, 10 2-qubits gates, 7 T-gates, 16 depths)

qsyn> qcir print --diagram
Q 0  - cx(30)-- cx(29)-- cx(28)--  h(25)-- cx(22)-- cx(21)--tdg(19)--  h(18)-- cz(17)--  h(16)--tdg(13)--  h(11)-- cx( 8)-- cx( 7)--  h( 4)--  t( 0)-
Q 1  -  h(26)--  h(23)-------------------- cx(22)----------- cx(20)----------- cz(17)--tdg(14)--  h(10)-- cx( 9)----------- cx( 7)--  h( 5)--  t( 1)-
Q 2  - cx(30)-- cx(29)-- cx(28)--  h(27)--  h(24)-- cx(21)-- cx(20)--  t(15)--  h(12)-------------------- cx( 9)-- cx( 8)--  h( 6)--  t( 3)--  h( 2)-

qsyn> zx test --identity
The graph is an identity!

qsyn> qc2ts

qsyn> tensor equiv 0 1
Equivalent
- Global Norm : 1
- Global Phase: 0

qsyn> quit -f

