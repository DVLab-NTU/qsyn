DV Lab, NTUEE, Qsyn 0.4.2
qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qccp -l
Listed by gate ID
ID:   0 (  h)      Time:    1     Qubit:   0 
ID:   1 (  h)      Time:    2     Qubit:   0 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)

> Gate 0 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 2), type: -
Add edge (0, 2)
Remove edge (2, 2), type: -
Add edge (1, 2)

> Gate 1 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 3), type: -
Add edge (2, 3)
Remove edge (2, 3), type: -
Add edge (1, 3)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 4)	  #Neighbors:   1     (3, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, -) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (1, -) (2, -) 
Total #Vertices: 4


qsyn> zxgsimp -hr
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 3)
Remove ID: 2
<<<

Iteration 2:
>>>
Add edge (0, 1)
Remove ID: 3
<<<
=> 2 iterations.
  1) 1 matches
  2) 1 matches

Hadamard Rule                 
=> 0 iterations.


qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (1, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 4)	  #Neighbors:   1     (0, -) 
Total #Vertices: 2


qsyn> zxge -addv 0 H_BOX 0
Add vertex ([1m[33mH[0m[0m) 4

qsyn> zxge -adde 0 4 HADAMARD
Add edge (0, 4)

qsyn> zxge -adde 1 4 SIMPLE
Add edge (1, 4)

qsyn> zxge -rme 0 1 -ALL
Remove edge (0, 1), type: -

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (4, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 4)	  #Neighbors:   1     (4, -) 
ID:   4 ([1m[33mH[0m[0m, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   2     (0, [1m[34mH[0m[0m) (1, -) 
Total #Vertices: 3


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 1)
Remove ID: 4
<<<
=> 1 iterations.
  1) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxr

qsyn> qcr

qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qccp -l
Listed by gate ID
ID:   0 (  h)      Time:    1     Qubit:   0 
ID:   1 (  h)      Time:    2     Qubit:   0 
ID:   2 (  h)      Time:    3     Qubit:   0 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)

> Gate 0 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 2), type: -
Add edge (0, 2)
Remove edge (2, 2), type: -
Add edge (1, 2)

> Gate 1 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 3), type: -
Add edge (2, 3)
Remove edge (2, 3), type: -
Add edge (1, 3)

> Gate 2 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 4), type: -
Add edge (3, 4)
Remove edge (2, 4), type: -
Add edge (1, 4)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (4, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, -) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, -) (4, -) 
ID:   4 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (1, -) (3, -) 
Total #Vertices: 5


qsyn> zxge -rme 2 3 -ALL
Remove edge (2, 3), type: -

qsyn> zxge -rme 3 4 -ALL
Remove edge (3, 4), type: -

qsyn> zxge -adde 2 3 HADAMARD
Add edge (2, 3)

qsyn> zxge -adde 3 4 HADAMARD
Add edge (3, 4)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (4, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, [1m[34mH[0m[0m) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, [1m[34mH[0m[0m) (4, [1m[34mH[0m[0m) 
ID:   4 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (1, -) (3, [1m[34mH[0m[0m) 
Total #Vertices: 5


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 3)
Remove ID: 2
<<<

Iteration 2:
>>>
Add edge (0, 4)
Remove ID: 3
<<<

Iteration 3:
>>>
Add edge (0, 1)
Remove ID: 4
<<<
=> 3 iterations.
  1) 1 matches
  2) 1 matches
  3) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxr

qsyn> qcr

qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qccp -l
Listed by gate ID
ID:   0 (  h)      Time:    1     Qubit:   0 
ID:   1 (  h)      Time:    2     Qubit:   0 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)

> Gate 0 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 2), type: -
Add edge (0, 2)
Remove edge (2, 2), type: -
Add edge (1, 2)

> Gate 1 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 3), type: -
Add edge (2, 3)
Remove edge (2, 3), type: -
Add edge (1, 3)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 4)	  #Neighbors:   1     (3, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, -) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (1, -) (2, -) 
Total #Vertices: 4


qsyn> zxge -rme 0 2 -ALL
Remove edge (0, 2), type: -

qsyn> zxge -rme 2 3 -ALL
Remove edge (2, 3), type: -

qsyn> zxge -rme 3 1 -ALL
Remove edge (3, 1), type: -

qsyn> zxge -adde 0 2 HADAMARD
Add edge (0, 2)

qsyn> zxge -adde 2 3 HADAMARD
Add edge (2, 3)

qsyn> zxge -adde 3 1 HADAMARD
Add edge (1, 3)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 4)	  #Neighbors:   1     (3, [1m[34mH[0m[0m) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, [1m[34mH[0m[0m) (3, [1m[34mH[0m[0m) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (1, [1m[34mH[0m[0m) (2, [1m[34mH[0m[0m) 
Total #Vertices: 4


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 3)
Remove ID: 2
<<<

Iteration 2:
>>>
Add edge (0, 1)
Remove ID: 3
<<<
=> 2 iterations.
  1) 1 matches
  2) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (1, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 4)	  #Neighbors:   1     (0, [1m[34mH[0m[0m) 
Total #Vertices: 2


qsyn> zxr

qsyn> qcr

qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qccp -l
Listed by gate ID
ID:   0 (  h)      Time:    1     Qubit:   0 
ID:   1 (  h)      Time:    2     Qubit:   0 
ID:   2 (  h)      Time:    3     Qubit:   0 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)

> Gate 0 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 2), type: -
Add edge (0, 2)
Remove edge (2, 2), type: -
Add edge (1, 2)

> Gate 1 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 3), type: -
Add edge (2, 3)
Remove edge (2, 3), type: -
Add edge (1, 3)

> Gate 2 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 4), type: -
Add edge (3, 4)
Remove edge (2, 4), type: -
Add edge (1, 4)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (4, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, -) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, -) (4, -) 
ID:   4 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (1, -) (3, -) 
Total #Vertices: 5


qsyn> zxge -rme 0 2 SIMPLE
Remove edge (0, 2), type: -

qsyn> zxge -rme 2 3 SIMPLE
Remove edge (2, 3), type: -

qsyn> zxge -rme 3 4 SIMPLE
Remove edge (3, 4), type: -

qsyn> zxge -rme 4 1 SIMPLE
Remove edge (4, 1), type: -

qsyn> zxge -adde 0 2 HADAMARD
Add edge (0, 2)

qsyn> zxge -adde 2 3 HADAMARD
Add edge (2, 3)

qsyn> zxge -adde 3 4 HADAMARD
Add edge (3, 4)

qsyn> zxge -adde 4 1 HADAMARD
Add edge (1, 4)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (4, [1m[34mH[0m[0m) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, [1m[34mH[0m[0m) (3, [1m[34mH[0m[0m) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, [1m[34mH[0m[0m) (4, [1m[34mH[0m[0m) 
ID:   4 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (1, [1m[34mH[0m[0m) (3, [1m[34mH[0m[0m) 
Total #Vertices: 5


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 3)
Remove ID: 2
<<<

Iteration 2:
>>>
Add edge (0, 4)
Remove ID: 3
<<<

Iteration 3:
>>>
Add edge (0, 1)
Remove ID: 4
<<<
=> 3 iterations.
  1) 1 matches
  2) 1 matches
  3) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (1, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (0, [1m[34mH[0m[0m) 
Total #Vertices: 2


qsyn> zxr

qsyn> qcr

qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcga -h 0

qsyn> qcga -z 0

qsyn> qcga -h 0

qsyn> qccp -l
Listed by gate ID
ID:   0 (  h)      Time:    1     Qubit:   0 
ID:   1 (  z)      Time:    2     Qubit:   0 
ID:   2 (  h)      Time:    3     Qubit:   0 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)

> Gate 0 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 2), type: -
Add edge (0, 2)
Remove edge (2, 2), type: -
Add edge (1, 2)

> Gate 1 (z)
Add vertex (‚óè) 0
Add vertex ([1m[32mZ[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 3), type: -
Add edge (2, 3)
Remove edge (2, 3), type: -
Add edge (1, 3)

> Gate 2 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 4), type: -
Add edge (3, 4)
Remove edge (2, 4), type: -
Add edge (1, 4)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (4, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, -) 
ID:   3 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, -) (4, -) 
ID:   4 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (1, -) (3, -) 
Total #Vertices: 5


qsyn> zxge -rme 0 2 SIMPLE
Remove edge (0, 2), type: -

qsyn> zxge -rme 3 4 SIMPLE
Remove edge (3, 4), type: -

qsyn> zxge -adde 0 2 HADAMARD
Add edge (0, 2)

qsyn> zxge -adde 3 4 HADAMARD
Add edge (3, 4)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (4, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, [1m[34mH[0m[0m) (3, -) 
ID:   3 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, -) (4, [1m[34mH[0m[0m) 
ID:   4 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (1, -) (3, [1m[34mH[0m[0m) 
Total #Vertices: 5


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 3)
Remove ID: 2
<<<

Iteration 2:
>>>
Add edge (1, 3)
Remove ID: 4
<<<
=> 2 iterations.
  1) 1 matches
  2) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (3, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 5)	  #Neighbors:   1     (3, -) 
ID:   3 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (0, -) (1, -) 
Total #Vertices: 3


qsyn> zxr

qsyn> qcr

qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcba 

qsyn> qcga -z 0

qsyn> qcga -z 1

qsyn> qccp -l
Listed by gate ID
ID:   0 (  z)      Time:    1     Qubit:   0 
ID:   1 (  z)      Time:    1     Qubit:   1 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)
Add vertex (‚óè) 2
Add vertex (‚óè) 3
Add edge (2, 3)

> Gate 1 (z)
Add vertex (‚óè) 0
Add vertex ([1m[32mZ[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 4), type: -
Add edge (2, 4)
Remove edge (2, 4), type: -
Add edge (3, 4)

> Gate 0 (z)
Add vertex (‚óè) 0
Add vertex ([1m[32mZ[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 5), type: -
Add edge (0, 5)
Remove edge (2, 5), type: -
Add edge (1, 5)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (5, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 3)	  #Neighbors:   1     (5, -) 
ID:   2 (‚óè, 0)           (Qubit, Col): (1, 0)	  #Neighbors:   1     (4, -) 
ID:   3 (‚óè, 0)           (Qubit, Col): (1, 3)	  #Neighbors:   1     (4, -) 
ID:   4 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (1, 2)	  #Neighbors:   2     (2, -) (3, -) 
ID:   5 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (1, -) 
Total #Vertices: 6


qsyn> zxge -addv 0 H_BOX 0
Add vertex ([1m[33mH[0m[0m) 6

qsyn> zxge -addv 1 H_BOX 0
Add vertex ([1m[33mH[0m[0m) 7

qsyn> zxge -adde 4 6 HADAMARD
Add edge (4, 6)

qsyn> zxge -adde 6 7 SIMPLE
Add edge (6, 7)

qsyn> zxge -adde 7 5 HADAMARD
Add edge (5, 7)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (5, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 3)	  #Neighbors:   1     (5, -) 
ID:   2 (‚óè, 0)           (Qubit, Col): (1, 0)	  #Neighbors:   1     (4, -) 
ID:   3 (‚óè, 0)           (Qubit, Col): (1, 3)	  #Neighbors:   1     (4, -) 
ID:   4 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (1, 2)	  #Neighbors:   3     (2, -) (3, -) (6, [1m[34mH[0m[0m) 
ID:   5 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   3     (0, -) (1, -) (7, [1m[34mH[0m[0m) 
ID:   6 ([1m[33mH[0m[0m, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   2     (4, [1m[34mH[0m[0m) (7, -) 
ID:   7 ([1m[33mH[0m[0m, 0)           (Qubit, Col): (1, 0)	  #Neighbors:   2     (5, [1m[34mH[0m[0m) (6, -) 
Total #Vertices: 8


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (4, 7)
Remove ID: 6
<<<

Iteration 2:
>>>
Add edge (4, 5)
Remove ID: 7
<<<
=> 2 iterations.
  1) 1 matches
  2) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (5, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 3)	  #Neighbors:   1     (5, -) 
ID:   2 (‚óè, 0)           (Qubit, Col): (1, 0)	  #Neighbors:   1     (4, -) 
ID:   3 (‚óè, 0)           (Qubit, Col): (1, 3)	  #Neighbors:   1     (4, -) 
ID:   4 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (1, 2)	  #Neighbors:   3     (2, -) (3, -) (5, -) 
ID:   5 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   3     (0, -) (1, -) (4, -) 
Total #Vertices: 6


qsyn> zxr

qsyn> qcr

qsyn> ver 9
Note: verbose level is set to 9

qsyn> qcba
Note: QCir list is empty now. Create a new one.
Create and checkout to QCir 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qcga -z 0

qsyn> qcga -h 0

qsyn> qcga -h 0

qsyn> qcga -z 0

qsyn> qccp -l
Listed by gate ID
ID:   0 (  h)      Time:    1     Qubit:   0 
ID:   1 (  h)      Time:    2     Qubit:   0 
ID:   2 (  z)      Time:    3     Qubit:   0 
ID:   3 (  h)      Time:    4     Qubit:   0 
ID:   4 (  h)      Time:    5     Qubit:   0 
ID:   5 (  z)      Time:    6     Qubit:   0 

qsyn> qc2zx
Create and checkout to Graph 0
Traverse and build the graph... 

> Add boundaries
Add vertex (‚óè) 0
Add vertex (‚óè) 1
Add edge (0, 1)

> Gate 0 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 2), type: -
Add edge (0, 2)
Remove edge (2, 2), type: -
Add edge (1, 2)

> Gate 1 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 3), type: -
Add edge (2, 3)
Remove edge (2, 3), type: -
Add edge (1, 3)

> Gate 2 (z)
Add vertex (‚óè) 0
Add vertex ([1m[32mZ[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 4), type: -
Add edge (3, 4)
Remove edge (2, 4), type: -
Add edge (1, 4)

> Gate 3 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 5), type: -
Add edge (4, 5)
Remove edge (2, 5), type: -
Add edge (1, 5)

> Gate 4 (h)
Add vertex (‚óè) 0
Add vertex ([1m[33mH[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 6), type: -
Add edge (5, 6)
Remove edge (2, 6), type: -
Add edge (1, 6)

> Gate 5 (z)
Add vertex (‚óè) 0
Add vertex ([1m[32mZ[0m[0m) 1
Add vertex (‚óè) 2
Add edge (0, 1)
Add edge (1, 2)
Remove edge (0, 7), type: -
Add edge (6, 7)
Remove edge (2, 7), type: -
Add edge (1, 7)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 8)	  #Neighbors:   1     (7, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, -) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, -) (4, -) 
ID:   4 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (3, -) (5, -) 
ID:   5 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 5)	  #Neighbors:   2     (4, -) (6, -) 
ID:   6 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 6)	  #Neighbors:   2     (5, -) (7, -) 
ID:   7 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 7)	  #Neighbors:   2     (1, -) (6, -) 
Total #Vertices: 8


qsyn> zxge -rme 2 3 SIMPLE
Remove edge (2, 3), type: -

qsyn> zxge -adde 2 3 HADAMARD
Add edge (2, 3)

qsyn> zxge -rme 4 5 SIMPLE
Remove edge (4, 5), type: -

qsyn> zxge -adde 4 5 HADAMARD
Add edge (4, 5)

qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (2, -) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 8)	  #Neighbors:   1     (7, -) 
ID:   2 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 2)	  #Neighbors:   2     (0, -) (3, [1m[34mH[0m[0m) 
ID:   3 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 3)	  #Neighbors:   2     (2, [1m[34mH[0m[0m) (4, -) 
ID:   4 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (3, -) (5, [1m[34mH[0m[0m) 
ID:   5 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 5)	  #Neighbors:   2     (4, [1m[34mH[0m[0m) (6, -) 
ID:   6 ([1m[33mH[0m[0m, œÄ)           (Qubit, Col): (0, 6)	  #Neighbors:   2     (5, -) (7, -) 
ID:   7 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 7)	  #Neighbors:   2     (1, -) (6, -) 
Total #Vertices: 8


qsyn> zxgsimp -hf
Hadamard Rule                 

Iteration 1:
>>>
Add edge (0, 3)
Add edge (4, 6)
Remove ID: 2
Remove ID: 5
<<<

Iteration 2:
>>>
Add edge (0, 4)
Remove ID: 3
<<<

Iteration 3:
>>>
Add edge (4, 7)
Remove ID: 6
<<<
=> 3 iterations.
  1) 2 matches
  2) 1 matches
  3) 1 matches

Hadamard Cancellation Rule    
=> 0 iterations.


qsyn> zxgp -v

ID:   0 (‚óè, 0)           (Qubit, Col): (0, 0)	  #Neighbors:   1     (4, [1m[34mH[0m[0m) 
ID:   1 (‚óè, 0)           (Qubit, Col): (0, 8)	  #Neighbors:   1     (7, -) 
ID:   4 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 4)	  #Neighbors:   2     (0, [1m[34mH[0m[0m) (7, [1m[34mH[0m[0m) 
ID:   7 ([1m[32mZ[0m[0m, œÄ)           (Qubit, Col): (0, 7)	  #Neighbors:   2     (1, -) (4, [1m[34mH[0m[0m) 
Total #Vertices: 4


qsyn> qq -f

