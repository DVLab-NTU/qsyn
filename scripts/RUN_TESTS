#!/bin/bash

if [ ! -x "$(command -v parallel)" ]; then
    echo "Error: GNU parallel is not installed!!"
    exit 1
fi

# test if colordiff is installed; if not use diff
if [ -x "$(command -v colordiff)" ]; then
    DIFF="colordiff"
else
    DIFF="diff"
fi

# return text in green, bold
pass-style() {
    if [ $# -ne 1 ]; then
        echo "Usage: pass-style <text>"  
    else 
        echo -e "\033[1;32m$1\033[0m"
    fi
}
export -f pass-style

# return text in red, bold
fail-style() {
    if [ $# -ne 1 ]; then
        echo "Usage: fail-style <text>"  
    else 
        echo -e "\033[1;31m$1\033[0m"
    fi
}
export -f fail-style

# return text in cyan, bold
unknown-style() {
    if [ $# -ne 1 ]; then
        echo "Usage: unknown-style <text>"  
    else 
        echo -e "\033[1;36m$1\033[0m"
    fi
}
export -f unknown-style

# print usage message
usage() {
    echo "Usage: $0 [-d|--diff] [-u|--update] [-q|--qsyn <path to qsyn>]"
    echo "  -d, --diff      diff the output of qsyn with the expected output"
    echo "  -u, --update    update the expected output with the output of qsyn"
    echo "  -q, --qsyn      path to qsyn executable"
    echo "  -v, --verbose   also report tests that pass"
    echo "  -s, --silent    do not report difference between execution result and reference"
}
export -f usage

# parse arguments

cd "$(git rev-parse --show-toplevel)" || exit 1
QSYN=./qsyn
ACTION=""
SILENT=0
VERBOSE=0
POSITIONAL=()

while [[ $# -gt 0 ]]; do
    case $1 in
        -d|--diff) 
            if [ -n "$ACTION" ]; then
                echo "Error: cannot specify multiple actions!!"
                usage
                exit 1
            fi
            ACTION="diff"
            shift # argument
            ;;
        -u|--update) 
            if [ -n "$ACTION" ]; then
                echo "Error: cannot specify multiple actions!!"
                usage
                exit 1
            fi
            ACTION="update"
            shift # argument
            ;;
        -q|--qsyn)
            QSYN=$2;
            shift # argument
            shift # variable
            ;;
        -v|--verbose)
            VERBOSE=1
            shift # argument
            ;;
        -s|--silent)
            SILENT=1
            shift # argument
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        -*|--*)
            echo "Error: unknown option $1!!"
            usage
            exit 1
            ;;
        *)
            POSITIONAL+=("$1")
            shift # argument
    esac
done

# the default action is to diff
if [ ! -n "$ACTION" ]; then
    ACTION="diff"
fi

# if no positional argument is given, run all tests from the tests directory
if [ ${#POSITIONAL[@]} -eq 0 ]; then
    POSITIONAL=(tests)
fi

TESTS=()
# for each positional argument, if it is a file, run the test on that file
# if it is a directory, run the test on all files in that directory
for arg in "${POSITIONAL[@]}"; do
    if [ -f "$arg" ]; then
        TESTS+=("$arg")
    elif [ -d "$arg" ]; then
        for file in $(find $arg -regex ".*\.dof" -type f); do
            if [ -f "$file" ]; then
                TESTS+=("$file")
            fi
        done
    else
        echo "Error: $arg is not a file or directory!!"
        usage
        exit 1
    fi
done

# run dofile with qsyn and diff the output with the expected output

ref-path() {
    local TEST=$1
    echo $(realpath --relative-to $(pwd) "$(dirname ${TEST})/../ref/$(basename ${TEST%.*}).log")
}
export -f ref-path

# diff the output of qsyn with the reference output
dofile-result-same-with-ref() {
    local TEST=$1
    local VERBOSE=$2
    local SILENT=$3
    local QSYN=$4
    local DIFF=$5
    local REF=$(ref-path $TEST)
    
    DIFF_OUTPUT=$(OMP_WAIT_POLICY=passive $QSYN --no-version --qsynrc-path /dev/null --file $TEST 2>&1 | $DIFF - $REF 2>&1)
    if [ $? -eq 0 ]; then
        if [[ $VERBOSE -eq 1 ]]; then
            echo "  $(pass-style '✓') $TEST"
            return 0
        fi
    else
        if [ ! -f $REF ]; then
            echo "  $(unknown-style '?') $REF"
        else 
            echo "  $(fail-style '✗') $TEST"
        fi
        if [[ $SILENT -eq 0 ]]; then
            # indent diff output
            DIFF_OUTPUT=$(echo "$DIFF_OUTPUT" | sed 's/^/    /')
            echo "$DIFF_OUTPUT"
        fi
        return 1
    fi
}
export -f dofile-result-same-with-ref

update-dofile-ref() {
    local TEST=$1
    local VERBOSE=$2
    local SILENT=$3
    local QSYN=$4
    local REF=$(ref-path $TEST)

    # if the reference file does not exist, create it
    if [[ ! -f $REF ]]; then
        mkdir -p $(dirname $REF)
        touch $REF
    fi

    DIFF_OUTPUT=$(OMP_WAIT_POLICY=passive $QSYN --no-version --qsynrc-path /dev/null --file $TEST 2>&1 | diff $REF -)

    # update reference file if the output of qsyn is different from the reference
    if [[ $? -eq 0 ]]; then
        if [[ $VERBOSE -eq 1 ]]; then
            echo "  - $TEST"
            return 0
        fi
    else
        printf "%s\n" "$DIFF_OUTPUT" | patch -f $REF
        if [[ $? -eq 1 ]]; then
            echo "  $(fail-style !) $TEST"
            return 0
        else 
            echo "  $(pass-style ↑) $TEST"
            return 1
        fi
    fi
}
export -f update-dofile-ref

# diff dofiles and report result
if [[ "$ACTION" == 'diff' ]]; then
    echo "> Testing dofiles..."
    
    # run in parallel and count failures
    parallel -j"$(nproc)" "dofile-result-same-with-ref {} $VERBOSE $SILENT $QSYN $DIFF" ::: "${TESTS[@]}"

    FAIL_COUNT=$?

    TESTS_COUNT=${#TESTS[@]}
    if [ $FAIL_COUNT -eq 0 ]; then
        echo "$(pass-style "Passed all $TESTS_COUNT tests.")"
    else
        echo "$(fail-style "$FAIL_COUNT out of $TESTS_COUNT tests failed.")"
    fi
elif [[ "$ACTION" == 'update' ]]; then
    echo "> Updating reference files..."

    # run in parallel and count updates
    parallel -j"$(nproc)" "update-dofile-ref {} $VERBOSE $SILENT $QSYN" ::: "${TESTS[@]}"

    UPDATE_COUNT=$?

    TESTS_COUNT=${#TESTS[@]}

    echo "$(pass-style "Updated $UPDATE_COUNT out of $TESTS_COUNT reference files.")"
fi