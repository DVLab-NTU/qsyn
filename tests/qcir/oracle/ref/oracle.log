qsyn> logger trace
[info]     Setting logger level to "trace"

qsyn> qcir oracle -a 1 0010
[debug]    xag:
[debug]        XAGNode(1 = INPUT)
[debug]        XAGNode(2 = INPUT)
[debug]        XAGNode(3 = 1 & ~2)
[debug]    xag.outputs: [3]
[debug]    xag.output_inverted: [false]
[debug]    optimal cut:
[debug]    1: 1, 
[debug]    2: 2, 
[debug]    3: 1, 2, 
[debug]    dependency graph: DepGraph(size: 1, output: [0],
graph:
DepGraphNode(id: 0, xag_id: 3, deps: [])
)
[warn]     n_ancilla = 1 is too large, using n_ancilla = 0 instead
[debug]    pebbling: found K = 2
[debug]    solution:
[debug]    time = 00 : .
[debug]    time = 01 : *
[info]     Successfully created and checked out to QCir 0

qsyn> qcir print -g
Listed by gate ID
0 (t=1): x    q[1]
1 (t=6): ccx  q[0],  q[1],  q[2]
2 (t=7): x    q[1]

qsyn> qcir oracle -a 2 11010001
[debug]    xag:
[debug]        XAGNode(1 = INPUT)
[debug]        XAGNode(2 = INPUT)
[debug]        XAGNode(3 = INPUT)
[debug]        XAGNode(4 = 1 & 2)
[debug]        XAGNode(5 = 1 & ~4)
[debug]        XAGNode(6 = 3 & ~5)
[debug]        XAGNode(7 = ~1 & ~2)
[debug]        XAGNode(8 = ~3 & 7)
[debug]        XAGNode(9 = ~6 & ~8)
[debug]    xag.outputs: [9]
[debug]    xag.output_inverted: [true]
[debug]    optimal cut:
[debug]    1: 1, 
[debug]    2: 2, 
[debug]    3: 3, 
[debug]    9: 1, 2, 3, 
[debug]    dependency graph: DepGraph(size: 1, output: [0],
graph:
DepGraphNode(id: 0, xag_id: 9, deps: [])
)
[warn]     n_ancilla = 2 is too large, using n_ancilla = 0 instead
[debug]    pebbling: found K = 2
[debug]    solution:
[debug]    time = 00 : .
[debug]    time = 01 : *
[info]     Successfully created and checked out to QCir 1

qsyn> qcir print -g
Listed by gate ID
0 (t= 1): x     q[0]
1 (t= 3): cx    q[0],  q[2]
2 (t= 8): cccx  q[0],  q[1],  q[2],  q[3]
3 (t=10): cx    q[0],  q[2]
4 (t=11): x     q[0]
5 (t=16): cccx  q[0],  q[1],  q[2],  q[3]
6 (t=18): cx    q[0],  q[3]
7 (t=19): x     q[3]

qsyn> qcir oracle -a 3 0011000101011101
[debug]    xag:
[debug]        XAGNode(1 = INPUT)
[debug]        XAGNode(2 = INPUT)
[debug]        XAGNode(3 = INPUT)
[debug]        XAGNode(4 = INPUT)
[debug]        XAGNode(5 = 3 & 4)
[debug]        XAGNode(6 = 2 & ~3)
[debug]        XAGNode(7 = ~1 & ~6)
[debug]        XAGNode(8 = ~5 & 7)
[debug]        XAGNode(9 = ~4 & 6)
[debug]        XAGNode(10 = ~2 & 5)
[debug]        XAGNode(11 = ~9 & ~10)
[debug]        XAGNode(12 = ~8 & 11)
[debug]    xag.outputs: [12]
[debug]    xag.output_inverted: [true]
[debug]    optimal cut:
[debug]    1: 1, 
[debug]    2: 2, 
[debug]    3: 3, 
[debug]    4: 4, 
[debug]    5: 3, 4, 
[debug]    6: 2, 3, 
[debug]    7: 1, 6, 
[debug]    8: 5, 7, 
[debug]    11: 2, 3, 4, 
[debug]    12: 8, 11, 
[debug]    dependency graph: DepGraph(size: 6, output: [5],
graph:
DepGraphNode(id: 0, xag_id: 5, deps: []),
DepGraphNode(id: 1, xag_id: 6, deps: []),
DepGraphNode(id: 2, xag_id: 7, deps: [1]),
DepGraphNode(id: 3, xag_id: 8, deps: [0, 2]),
DepGraphNode(id: 4, xag_id: 11, deps: []),
DepGraphNode(id: 5, xag_id: 12, deps: [3, 4])
)
[debug]    pebbling: found K = 9
[debug]    solution:
[debug]    time = 00 : ......
[debug]    time = 01 : **....
[debug]    time = 02 : ***...
[debug]    time = 03 : *.***.
[debug]    time = 04 : ..****
[debug]    time = 05 : *.**.*
[debug]    time = 06 : ***..*
[debug]    time = 07 : **...*
[debug]    time = 08 : .....*
[info]     Successfully created and checked out to QCir 2

qsyn> qcir print -g
Listed by gate ID
 0 (t=  5): ccx   q[2],  q[3],  q[4]
 1 (t=  6): x     q[2]
 2 (t= 11): ccx   q[1],  q[2],  q[5]
 3 (t= 12): x     q[2]
 4 (t=  1): x     q[0]
 5 (t= 12): x     q[5]
 6 (t= 17): ccx   q[0],  q[5],  q[6]
 7 (t= 18): x     q[0]
 8 (t= 18): x     q[5]
 9 (t= 13): x     q[2]
10 (t= 23): ccx   q[1],  q[2],  q[5]
11 (t= 24): x     q[2]
12 (t=  6): x     q[4]
13 (t= 22): ccx   q[4],  q[6],  q[7]
14 (t= 23): x     q[4]
15 (t= 24): x     q[1]
16 (t= 29): cccx  q[1],  q[2],  q[3],  q[5]
17 (t= 31): cx    q[1],  q[5]
18 (t= 32): x     q[1]
19 (t= 34): cx    q[1],  q[2]
20 (t= 36): cx    q[1],  q[3]
21 (t= 41): cccx  q[1],  q[2],  q[3],  q[5]
22 (t= 43): cx    q[1],  q[2]
23 (t= 45): cx    q[1],  q[3]
24 (t= 47): cx    q[1],  q[5]
25 (t= 50): ccx   q[2],  q[3],  q[4]
26 (t= 23): x     q[7]
27 (t= 55): ccx   q[7],  q[5],  q[4]
28 (t= 56): x     q[7]
29 (t= 48): x     q[1]
30 (t= 60): cccx  q[1],  q[2],  q[3],  q[5]
31 (t= 62): cx    q[1],  q[5]
32 (t= 63): x     q[1]
33 (t= 65): cx    q[1],  q[2]
34 (t= 67): cx    q[1],  q[3]
35 (t= 72): cccx  q[1],  q[2],  q[3],  q[5]
36 (t= 74): cx    q[1],  q[2]
37 (t= 76): cx    q[1],  q[3]
38 (t= 78): cx    q[1],  q[5]
39 (t= 83): ccx   q[2],  q[3],  q[5]
40 (t= 84): x     q[5]
41 (t= 89): ccx   q[5],  q[6],  q[7]
42 (t= 90): x     q[5]
43 (t= 84): x     q[2]
44 (t= 94): ccx   q[1],  q[2],  q[7]
45 (t= 95): x     q[2]
46 (t= 19): x     q[0]
47 (t= 95): x     q[7]
48 (t=100): ccx   q[0],  q[7],  q[6]
49 (t=101): x     q[0]
50 (t=101): x     q[7]
51 (t=100): ccx   q[2],  q[3],  q[5]
52 (t=101): x     q[2]
53 (t=106): ccx   q[1],  q[2],  q[7]
54 (t=107): x     q[2]
55 (t= 56): x     q[4]

qsyn> quit -f

