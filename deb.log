DV Lab, NTUEE, Qsyn 0.4.1
qsyn> QCNew
Create and checkout to QCir 0

qsyn> QCBAdd 2

qsyn> qcga -CZ 0 1
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end

qsyn> qcga -CX 0 1
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end

qsyn> qccprint -l
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 

qsyn> qccprint -q
Q 0  -cz( 0)--cx( 1)-
Q 1  -cz( 0)--cx( 1)-

qsyn> optimize
Before Parse Forward
Start parseForward
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
######### start parse gate ##########
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
_______________APPLY ADDCZ_______________
Into 6th loop
Parse gate done
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_available[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 1  _zs 0

######### start parse gate ##########
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
into for loop 
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 2
Into small while loop
718: 2
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
case III
type: 1
Into the case3 for loop
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
Second else if
Second else if-2
Pop remove
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
Remove: 
784: 2
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cz
reversed: 0
Is CX or CZ 0
688: 2
End if
689:  0
cz 2 π 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end
_addGate2Circuit
case II before erase
case II end
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 0
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end
_addGate2Circuit
case II before erase
case II end
tmp is
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
After Parse Circuit
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
corrections size: 0
After add corrections
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
###########  Number 1 iter #############
Start parseForward
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
reversed
######### start parse gate ##########
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

######### start parse gate ##########
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
_______________APPLY ADDCZ_______________
Into 4th loop
Into for loop (cz part)
Into 6th loop
Parse gate done
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
_available[1]
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 1  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 2
Into small while loop
718: 2
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
case III
type: 0
Into the case3 for loop
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
Second else if
Second else if-2
Pop remove
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
Remove: 
784: 2
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 1
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 0
690:  0
2
First if end
Prepend loop
2
Iinto for loop
Line A
Line B: 0
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Line C
Line else
Iinto for loop
Line A
Line B: 1
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Line C
Line else
End for loop
Second if end
_addGate2Circuit
case II before erase
case II end
Into small while loop
718: 2
ID:   1 ( cz)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cz
reversed: 1
Is CX or CZ 0
688: 2
End if
689:  0
cz 2 π 0
690:  0
2
First if end
Prepend loop
2
Iinto for loop
Line A
Line B: 0
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Line C
Line if
Iinto for loop
Line A
Line B: 1
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Line C
Line if
End for loop
Second if end
_addGate2Circuit
case II before erase
case II end
tmp is
Listed by gate ID
ID:   0 ( cx)      Time:    2     Qubit:   0   1 
ID:   1 ( cz)      Time:    1     Qubit:   0   1 
corrections size1: 0
Start parseForward
Listed by gate ID
ID:   0 ( cx)      Time:    2     Qubit:   0   1 
ID:   1 ( cz)      Time:    1     Qubit:   0   1 
######### start parse gate ##########
ID:   1 ( cz)      Time:    1     Qubit:   0   1 
_______________APPLY ADDCZ_______________
Into 6th loop
Parse gate done
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_available[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 1  _zs 0

######### start parse gate ##########
ID:   0 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
into for loop 
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 2
Into small while loop
718: 2
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
case III
type: 1
Into the case3 for loop
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
Second else if
Second else if-2
Pop remove
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
Remove: 
784: 2
_gates[0]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   0 ( cz)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cz
reversed: 0
Is CX or CZ 0
688: 2
End if
689:  0
cz 2 π 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end
_addGate2Circuit
case II before erase
case II end
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 0
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end
_addGate2Circuit
case II before erase
case II end
tmp is
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
corrections size2: 0
###########  Number 2 iter #############
Start parseForward
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
reversed
######### start parse gate ##########
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

######### start parse gate ##########
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
_______________APPLY ADDCZ_______________
Into first loop
Into for loop
Into second for loop
Into IF loop
Into second IF loop
Into second loop
CZ CNOT
Parse gate done
_gates[0]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   4 (  s)      Time:    0     Qubit:   0 
_gates[1]
ID:   2 (sdg)      Time:    0     Qubit:   1 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   3 (  s)      Time:    0     Qubit:   1 
_available[0]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   4 (  s)      Time:    0     Qubit:   0 
_available[1]
ID:   3 (  s)      Time:    0     Qubit:   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 3
Into small while loop
718: 2
ID:   2 (sdg)      Time:    0     Qubit:   1 
case I
679:  0
680: 2
AddGate2Circuit sdg
reversed: 1
688: 2
End if
689:  0
sdg 1 3π/2 0
690:  0
2
First if end
Prepend loop
1
Iinto for loop
Line A
Line B: 1
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Line C
Line else
End for loop
Second if end
_addGate2Circuit
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case III
type: 0
Into the case3 for loop
ID:   3 (  s)      Time:    0     Qubit:   1 
First if
679:  0
680: 2
AddGate2Circuit s
reversed: 1
688: 2
End if
689:  0
s 1 π/2 0
690:  0
2
First if end
Prepend loop
1
Iinto for loop
Line A
Line B: 1
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Line C
Line if
End for loop
Second if end
_addGate2Circuit
Pop remove
_gates[0]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   4 (  s)      Time:    0     Qubit:   0 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   3 (  s)      Time:    0     Qubit:   1 
Remove: 1 
784: 2
786: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   3 (  s)      Time:    0     Qubit:   1 
788: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[0]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   4 (  s)      Time:    0     Qubit:   0 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 1
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 0
690:  0
2
First if end
Prepend loop
2
Iinto for loop
Line A
Line B: 0
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Line C
Line else
Iinto for loop
Line A
Line B: 1
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Line C
Line if
End for loop
Second if end
_addGate2Circuit
case II before erase
case II end
Into small while loop
718: 2
ID:   4 (  s)      Time:    0     Qubit:   0 
case I
679:  0
680: 2
AddGate2Circuit s
reversed: 1
688: 2
End if
689:  0
s 1 π/2 0
690:  0
2
First if end
Prepend loop
1
Iinto for loop
Line A
Line B: 0
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Line C
Line if
End for loop
Second if end
_addGate2Circuit
tmp is
Listed by gate ID
ID:   0 (sdg)      Time:    4     Qubit:   1 
ID:   1 (  s)      Time:    3     Qubit:   1 
ID:   2 ( cx)      Time:    2     Qubit:   0   1 
ID:   3 (  s)      Time:    1     Qubit:   0 
corrections size1: 0
Start parseForward
Listed by gate ID
ID:   0 (sdg)      Time:    4     Qubit:   1 
ID:   1 (  s)      Time:    3     Qubit:   1 
ID:   2 ( cx)      Time:    2     Qubit:   0   1 
ID:   3 (  s)      Time:    1     Qubit:   0 
######### start parse gate ##########
ID:   3 (  s)      Time:    1     Qubit:   0 
issingleZ
Parse gate done
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
_gates[1]
_available[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
_available[1]
_availty[0]: 1  _availty[1]: 1  _zs 0

######### start parse gate ##########
ID:   2 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
into for loop 
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

######### start parse gate ##########
ID:   1 (  s)      Time:    3     Qubit:   1 
issingleZ
Parse gate done
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
ID:   2 (  p)      Time:    0     Qubit:   1 
_available[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   2 (  p)      Time:    0     Qubit:   1 
_availty[0]: 1  _availty[1]: 1  _zs 0

######### start parse gate ##########
ID:   0 (sdg)      Time:    4     Qubit:   1 
issingleZ
Parse gate done
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
_availty[0]: 1  _availty[1]: 1  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 1
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case III
type: 0
Pop remove
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
Remove: 
784: 2
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   0 (  p)      Time:    0     Qubit:   0 
case I
679:  0
680: 2
AddGate2Circuit p
reversed: 0
688: 2
End if
689:  0
p 1 π/2 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Second if end
_addGate2Circuit
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 0
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end
_addGate2Circuit
case II before erase
case II end
tmp is
Listed by gate ID
ID:   0 (  p)      Time:    1     Qubit:   0 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
corrections size2: 0
###########  Number 3 iter #############
Start parseForward
Listed by gate ID
ID:   0 (  p)      Time:    1     Qubit:   0 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
reversed
######### start parse gate ##########
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

######### start parse gate ##########
ID:   0 (  p)      Time:    1     Qubit:   0 
issingleZ
Parse gate done
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 (  p)      Time:    0     Qubit:   0 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 (  p)      Time:    0     Qubit:   0 
_available[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 1
Into small while loop
718: 2
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
case III
type: 0
Pop remove
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 (  p)      Time:    0     Qubit:   0 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
Remove: 
784: 2
_gates[0]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
ID:   1 (  p)      Time:    0     Qubit:   0 
_gates[1]
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   0 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 1
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 0
690:  0
2
First if end
Prepend loop
2
Iinto for loop
Line A
Line B: 0
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Line C
Line else
Iinto for loop
Line A
Line B: 1
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Line C
Line else
End for loop
Second if end
_addGate2Circuit
case II before erase
case II end
Into small while loop
718: 2
ID:   1 (  p)      Time:    0     Qubit:   0 
case I
679:  0
680: 2
AddGate2Circuit p
reversed: 1
688: 2
End if
689:  0
p 1 π/2 0
690:  0
2
First if end
Prepend loop
1
Iinto for loop
Line A
Line B: 0
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Line C
Line if
End for loop
Second if end
_addGate2Circuit
tmp is
Listed by gate ID
ID:   0 ( cx)      Time:    2     Qubit:   0   1 
ID:   1 (  p)      Time:    1     Qubit:   0 
corrections size1: 0
Start parseForward
Listed by gate ID
ID:   0 ( cx)      Time:    2     Qubit:   0   1 
ID:   1 (  p)      Time:    1     Qubit:   0 
######### start parse gate ##########
ID:   1 (  p)      Time:    1     Qubit:   0 
issingleZ
Parse gate done
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
_gates[1]
_available[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
_available[1]
_availty[0]: 1  _availty[1]: 1  _zs 0

######### start parse gate ##########
ID:   0 ( cx)      Time:    2     Qubit:   0   1 
_______________APPLY ADDCX_______________
Control: 0 Target: 1
Into second loop
into for loop 
Into fourth loop(!found match)
Done addcx:
Parse gate done
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_available[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_availty[0]: 1  _availty[1]: 2  _zs 0

start topo sort
711: 2
In to while: 0
q: 1 size: 1
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case III
type: 0
Pop remove
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
Remove: 
784: 2
_gates[0]
ID:   0 (  p)      Time:    0     Qubit:   0 
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
_gates[1]
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
BREAK: 2
q: 0 size: 2
Into small while loop
718: 2
ID:   0 (  p)      Time:    0     Qubit:   0 
case I
679:  0
680: 2
AddGate2Circuit p
reversed: 0
688: 2
End if
689:  0
p 1 π/2 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Second if end
_addGate2Circuit
Into small while loop
718: 2
ID:   1 ( cx)      Time:    0     Qubit:   0   1 
case II
726: 2
679:  0
680: 2
AddGate2Circuit cx
reversed: 0
Is CX or CZ 0
688: 2
End if
689:  0
cx 2 π 1
690:  0
2
First if end
Into getQubit foor loop
Size 2
0 and 0
Found! 0
Into getQubit foor loop
Size 2
0 and 1
Into getQubit foor loop
Size 2
1 and 1
Found! 1
Second if end
_addGate2Circuit
case II before erase
case II end
tmp is
Listed by gate ID
ID:   0 (  p)      Time:    1     Qubit:   0 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
Final result
Listed by gate ID
ID:   0 (  p)      Time:    1     Qubit:   0 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 
Q 0  - p( 0)--cx( 1)-
Q 1  ---------cx( 1)-

qsyn> qccprint -l
Listed by gate ID
ID:   0 ( cz)      Time:    1     Qubit:   0   1 
ID:   1 ( cx)      Time:    2     Qubit:   0   1 

qsyn> qq -f

